{"ast":null,"code":"var parseSampleFlags = require('./parse-sample-flags.js');\n\nvar trun = function (data) {\n  var result = {\n    version: data[0],\n    flags: new Uint8Array(data.subarray(1, 4)),\n    samples: []\n  },\n      view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n      // Flag interpretation\n  dataOffsetPresent = result.flags[2] & 0x01,\n      // compare with 2nd byte of 0x1\n  firstSampleFlagsPresent = result.flags[2] & 0x04,\n      // compare with 2nd byte of 0x4\n  sampleDurationPresent = result.flags[1] & 0x01,\n      // compare with 2nd byte of 0x100\n  sampleSizePresent = result.flags[1] & 0x02,\n      // compare with 2nd byte of 0x200\n  sampleFlagsPresent = result.flags[1] & 0x04,\n      // compare with 2nd byte of 0x400\n  sampleCompositionTimeOffsetPresent = result.flags[1] & 0x08,\n      // compare with 2nd byte of 0x800\n  sampleCount = view.getUint32(4),\n      offset = 8,\n      sample;\n\n  if (dataOffsetPresent) {\n    // 32 bit signed integer\n    result.dataOffset = view.getInt32(offset);\n    offset += 4;\n  } // Overrides the flags for the first sample only. The order of\n  // optional values will be: duration, size, compositionTimeOffset\n\n\n  if (firstSampleFlagsPresent && sampleCount) {\n    sample = {\n      flags: parseSampleFlags(data.subarray(offset, offset + 4))\n    };\n    offset += 4;\n\n    if (sampleDurationPresent) {\n      sample.duration = view.getUint32(offset);\n      offset += 4;\n    }\n\n    if (sampleSizePresent) {\n      sample.size = view.getUint32(offset);\n      offset += 4;\n    }\n\n    if (sampleCompositionTimeOffsetPresent) {\n      if (result.version === 1) {\n        sample.compositionTimeOffset = view.getInt32(offset);\n      } else {\n        sample.compositionTimeOffset = view.getUint32(offset);\n      }\n\n      offset += 4;\n    }\n\n    result.samples.push(sample);\n    sampleCount--;\n  }\n\n  while (sampleCount--) {\n    sample = {};\n\n    if (sampleDurationPresent) {\n      sample.duration = view.getUint32(offset);\n      offset += 4;\n    }\n\n    if (sampleSizePresent) {\n      sample.size = view.getUint32(offset);\n      offset += 4;\n    }\n\n    if (sampleFlagsPresent) {\n      sample.flags = parseSampleFlags(data.subarray(offset, offset + 4));\n      offset += 4;\n    }\n\n    if (sampleCompositionTimeOffsetPresent) {\n      if (result.version === 1) {\n        sample.compositionTimeOffset = view.getInt32(offset);\n      } else {\n        sample.compositionTimeOffset = view.getUint32(offset);\n      }\n\n      offset += 4;\n    }\n\n    result.samples.push(sample);\n  }\n\n  return result;\n};\n\nmodule.exports = trun;","map":{"version":3,"sources":["/home/ubuntu/Documents/video-player-examples/node_modules/mux.js/lib/tools/parse-trun.js"],"names":["parseSampleFlags","require","trun","data","result","version","flags","Uint8Array","subarray","samples","view","DataView","buffer","byteOffset","byteLength","dataOffsetPresent","firstSampleFlagsPresent","sampleDurationPresent","sampleSizePresent","sampleFlagsPresent","sampleCompositionTimeOffsetPresent","sampleCount","getUint32","offset","sample","dataOffset","getInt32","duration","size","compositionTimeOffset","push","module","exports"],"mappings":"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","sourcesContent":["var parseSampleFlags = require('./parse-sample-flags.js');\n\nvar trun = function(data) {\n  var\n  result = {\n    version: data[0],\n    flags: new Uint8Array(data.subarray(1, 4)),\n    samples: []\n  },\n    view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n    // Flag interpretation\n    dataOffsetPresent = result.flags[2] & 0x01, // compare with 2nd byte of 0x1\n    firstSampleFlagsPresent = result.flags[2] & 0x04, // compare with 2nd byte of 0x4\n    sampleDurationPresent = result.flags[1] & 0x01, // compare with 2nd byte of 0x100\n    sampleSizePresent = result.flags[1] & 0x02, // compare with 2nd byte of 0x200\n    sampleFlagsPresent = result.flags[1] & 0x04, // compare with 2nd byte of 0x400\n    sampleCompositionTimeOffsetPresent = result.flags[1] & 0x08, // compare with 2nd byte of 0x800\n    sampleCount = view.getUint32(4),\n    offset = 8,\n    sample;\n\n  if (dataOffsetPresent) {\n    // 32 bit signed integer\n    result.dataOffset = view.getInt32(offset);\n    offset += 4;\n  }\n\n  // Overrides the flags for the first sample only. The order of\n  // optional values will be: duration, size, compositionTimeOffset\n  if (firstSampleFlagsPresent && sampleCount) {\n    sample = {\n      flags: parseSampleFlags(data.subarray(offset, offset + 4))\n    };\n    offset += 4;\n    if (sampleDurationPresent) {\n      sample.duration = view.getUint32(offset);\n      offset += 4;\n    }\n    if (sampleSizePresent) {\n      sample.size = view.getUint32(offset);\n      offset += 4;\n    }\n    if (sampleCompositionTimeOffsetPresent) {\n      if (result.version === 1) {\n        sample.compositionTimeOffset = view.getInt32(offset);\n      } else {\n        sample.compositionTimeOffset = view.getUint32(offset);\n      }\n      offset += 4;\n    }\n    result.samples.push(sample);\n    sampleCount--;\n  }\n\n  while (sampleCount--) {\n    sample = {};\n    if (sampleDurationPresent) {\n      sample.duration = view.getUint32(offset);\n      offset += 4;\n    }\n    if (sampleSizePresent) {\n      sample.size = view.getUint32(offset);\n      offset += 4;\n    }\n    if (sampleFlagsPresent) {\n      sample.flags = parseSampleFlags(data.subarray(offset, offset + 4));\n      offset += 4;\n    }\n    if (sampleCompositionTimeOffsetPresent) {\n      if (result.version === 1) {\n        sample.compositionTimeOffset = view.getInt32(offset);\n      } else {\n        sample.compositionTimeOffset = view.getUint32(offset);\n      }\n      offset += 4;\n    }\n    result.samples.push(sample);\n  }\n  return result;\n};\n\nmodule.exports = trun;\n"]},"metadata":{},"sourceType":"script"}