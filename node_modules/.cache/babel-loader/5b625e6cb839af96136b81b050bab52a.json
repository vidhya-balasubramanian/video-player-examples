{"ast":null,"code":"var toUnsigned = require('../utils/bin').toUnsigned;\n\nvar parseType = require('./parse-type.js');\n\nvar findBox = function (data, path) {\n  var results = [],\n      i,\n      size,\n      type,\n      end,\n      subresults;\n\n  if (!path.length) {\n    // short-circuit the search for empty paths\n    return null;\n  }\n\n  for (i = 0; i < data.byteLength;) {\n    size = toUnsigned(data[i] << 24 | data[i + 1] << 16 | data[i + 2] << 8 | data[i + 3]);\n    type = parseType(data.subarray(i + 4, i + 8));\n    end = size > 1 ? i + size : data.byteLength;\n\n    if (type === path[0]) {\n      if (path.length === 1) {\n        // this is the end of the path and we've found the box we were\n        // looking for\n        results.push(data.subarray(i + 8, end));\n      } else {\n        // recursively search for the next box along the path\n        subresults = findBox(data.subarray(i + 8, end), path.slice(1));\n\n        if (subresults.length) {\n          results = results.concat(subresults);\n        }\n      }\n    }\n\n    i = end;\n  } // we've finished searching all of data\n\n\n  return results;\n};\n\nmodule.exports = findBox;","map":{"version":3,"sources":["/home/ubuntu/Documents/video-player-examples/node_modules/mux.js/lib/mp4/find-box.js"],"names":["toUnsigned","require","parseType","findBox","data","path","results","i","size","type","end","subresults","length","byteLength","subarray","push","slice","concat","module","exports"],"mappings":"AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAC,cAAD,CAAP,CAAwBD,UAAzC;;AACA,IAAIE,SAAS,GAAGD,OAAO,CAAC,iBAAD,CAAvB;;AAEA,IAAIE,OAAO,GAAG,UAASC,IAAT,EAAeC,IAAf,EAAqB;AACjC,MAAIC,OAAO,GAAG,EAAd;AAAA,MACEC,CADF;AAAA,MACKC,IADL;AAAA,MACWC,IADX;AAAA,MACiBC,GADjB;AAAA,MACsBC,UADtB;;AAGA,MAAI,CAACN,IAAI,CAACO,MAAV,EAAkB;AAChB;AACA,WAAO,IAAP;AACD;;AAED,OAAKL,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGH,IAAI,CAACS,UAArB,GAAkC;AAChCL,IAAAA,IAAI,GAAGR,UAAU,CAACI,IAAI,CAACG,CAAD,CAAJ,IAAe,EAAf,GAChBH,IAAI,CAACG,CAAC,GAAG,CAAL,CAAJ,IAAe,EADC,GAEhBH,IAAI,CAACG,CAAC,GAAG,CAAL,CAAJ,IAAgB,CAFA,GAGhBH,IAAI,CAACG,CAAC,GAAG,CAAL,CAHW,CAAjB;AAKAE,IAAAA,IAAI,GAAGP,SAAS,CAACE,IAAI,CAACU,QAAL,CAAcP,CAAC,GAAG,CAAlB,EAAqBA,CAAC,GAAG,CAAzB,CAAD,CAAhB;AAEAG,IAAAA,GAAG,GAAGF,IAAI,GAAG,CAAP,GAAWD,CAAC,GAAGC,IAAf,GAAsBJ,IAAI,CAACS,UAAjC;;AAEA,QAAIJ,IAAI,KAAKJ,IAAI,CAAC,CAAD,CAAjB,EAAsB;AACpB,UAAIA,IAAI,CAACO,MAAL,KAAgB,CAApB,EAAuB;AACrB;AACA;AACAN,QAAAA,OAAO,CAACS,IAAR,CAAaX,IAAI,CAACU,QAAL,CAAcP,CAAC,GAAG,CAAlB,EAAqBG,GAArB,CAAb;AACD,OAJD,MAIO;AACL;AACAC,QAAAA,UAAU,GAAGR,OAAO,CAACC,IAAI,CAACU,QAAL,CAAcP,CAAC,GAAG,CAAlB,EAAqBG,GAArB,CAAD,EAA4BL,IAAI,CAACW,KAAL,CAAW,CAAX,CAA5B,CAApB;;AACA,YAAIL,UAAU,CAACC,MAAf,EAAuB;AACrBN,UAAAA,OAAO,GAAGA,OAAO,CAACW,MAAR,CAAeN,UAAf,CAAV;AACD;AACF;AACF;;AACDJ,IAAAA,CAAC,GAAGG,GAAJ;AACD,GAjCgC,CAmCjC;;;AACA,SAAOJ,OAAP;AACD,CArCD;;AAuCAY,MAAM,CAACC,OAAP,GAAiBhB,OAAjB","sourcesContent":["var toUnsigned = require('../utils/bin').toUnsigned;\nvar parseType = require('./parse-type.js');\n\nvar findBox = function(data, path) {\n  var results = [],\n    i, size, type, end, subresults;\n\n  if (!path.length) {\n    // short-circuit the search for empty paths\n    return null;\n  }\n\n  for (i = 0; i < data.byteLength;) {\n    size = toUnsigned(data[i]     << 24 |\n      data[i + 1] << 16 |\n      data[i + 2] <<  8 |\n      data[i + 3]);\n\n    type = parseType(data.subarray(i + 4, i + 8));\n\n    end = size > 1 ? i + size : data.byteLength;\n\n    if (type === path[0]) {\n      if (path.length === 1) {\n        // this is the end of the path and we've found the box we were\n        // looking for\n        results.push(data.subarray(i + 8, end));\n      } else {\n        // recursively search for the next box along the path\n        subresults = findBox(data.subarray(i + 8, end), path.slice(1));\n        if (subresults.length) {\n          results = results.concat(subresults);\n        }\n      }\n    }\n    i = end;\n  }\n\n  // we've finished searching all of data\n  return results;\n};\n\nmodule.exports = findBox;\n\n"]},"metadata":{},"sourceType":"script"}