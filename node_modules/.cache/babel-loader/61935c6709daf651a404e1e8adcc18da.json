{"ast":null,"code":"var tfhd = function (data) {\n  var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n      result = {\n    version: data[0],\n    flags: new Uint8Array(data.subarray(1, 4)),\n    trackId: view.getUint32(4)\n  },\n      baseDataOffsetPresent = result.flags[2] & 0x01,\n      sampleDescriptionIndexPresent = result.flags[2] & 0x02,\n      defaultSampleDurationPresent = result.flags[2] & 0x08,\n      defaultSampleSizePresent = result.flags[2] & 0x10,\n      defaultSampleFlagsPresent = result.flags[2] & 0x20,\n      durationIsEmpty = result.flags[0] & 0x010000,\n      defaultBaseIsMoof = result.flags[0] & 0x020000,\n      i;\n  i = 8;\n\n  if (baseDataOffsetPresent) {\n    i += 4; // truncate top 4 bytes\n    // FIXME: should we read the full 64 bits?\n\n    result.baseDataOffset = view.getUint32(12);\n    i += 4;\n  }\n\n  if (sampleDescriptionIndexPresent) {\n    result.sampleDescriptionIndex = view.getUint32(i);\n    i += 4;\n  }\n\n  if (defaultSampleDurationPresent) {\n    result.defaultSampleDuration = view.getUint32(i);\n    i += 4;\n  }\n\n  if (defaultSampleSizePresent) {\n    result.defaultSampleSize = view.getUint32(i);\n    i += 4;\n  }\n\n  if (defaultSampleFlagsPresent) {\n    result.defaultSampleFlags = view.getUint32(i);\n  }\n\n  if (durationIsEmpty) {\n    result.durationIsEmpty = true;\n  }\n\n  if (!baseDataOffsetPresent && defaultBaseIsMoof) {\n    result.baseDataOffsetIsMoof = true;\n  }\n\n  return result;\n};\n\nmodule.exports = tfhd;","map":{"version":3,"sources":["/home/ubuntu/Documents/video-player-examples/node_modules/mux.js/lib/tools/parse-tfhd.js"],"names":["tfhd","data","view","DataView","buffer","byteOffset","byteLength","result","version","flags","Uint8Array","subarray","trackId","getUint32","baseDataOffsetPresent","sampleDescriptionIndexPresent","defaultSampleDurationPresent","defaultSampleSizePresent","defaultSampleFlagsPresent","durationIsEmpty","defaultBaseIsMoof","i","baseDataOffset","sampleDescriptionIndex","defaultSampleDuration","defaultSampleSize","defaultSampleFlags","baseDataOffsetIsMoof","module","exports"],"mappings":"AAAA,IAAIA,IAAI,GAAG,UAASC,IAAT,EAAe;AACxB,MACAC,IAAI,GAAG,IAAIC,QAAJ,CAAaF,IAAI,CAACG,MAAlB,EAA0BH,IAAI,CAACI,UAA/B,EAA2CJ,IAAI,CAACK,UAAhD,CADP;AAAA,MAEEC,MAAM,GAAG;AACPC,IAAAA,OAAO,EAAEP,IAAI,CAAC,CAAD,CADN;AAEPQ,IAAAA,KAAK,EAAE,IAAIC,UAAJ,CAAeT,IAAI,CAACU,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAAf,CAFA;AAGPC,IAAAA,OAAO,EAAEV,IAAI,CAACW,SAAL,CAAe,CAAf;AAHF,GAFX;AAAA,MAOEC,qBAAqB,GAAGP,MAAM,CAACE,KAAP,CAAa,CAAb,IAAkB,IAP5C;AAAA,MAQEM,6BAA6B,GAAGR,MAAM,CAACE,KAAP,CAAa,CAAb,IAAkB,IARpD;AAAA,MASEO,4BAA4B,GAAGT,MAAM,CAACE,KAAP,CAAa,CAAb,IAAkB,IATnD;AAAA,MAUEQ,wBAAwB,GAAGV,MAAM,CAACE,KAAP,CAAa,CAAb,IAAkB,IAV/C;AAAA,MAWES,yBAAyB,GAAGX,MAAM,CAACE,KAAP,CAAa,CAAb,IAAkB,IAXhD;AAAA,MAYEU,eAAe,GAAGZ,MAAM,CAACE,KAAP,CAAa,CAAb,IAAkB,QAZtC;AAAA,MAaEW,iBAAiB,GAAIb,MAAM,CAACE,KAAP,CAAa,CAAb,IAAkB,QAbzC;AAAA,MAcEY,CAdF;AAgBAA,EAAAA,CAAC,GAAG,CAAJ;;AACA,MAAIP,qBAAJ,EAA2B;AACzBO,IAAAA,CAAC,IAAI,CAAL,CADyB,CACjB;AACR;;AACAd,IAAAA,MAAM,CAACe,cAAP,GAAwBpB,IAAI,CAACW,SAAL,CAAe,EAAf,CAAxB;AACAQ,IAAAA,CAAC,IAAI,CAAL;AACD;;AACD,MAAIN,6BAAJ,EAAmC;AACjCR,IAAAA,MAAM,CAACgB,sBAAP,GAAgCrB,IAAI,CAACW,SAAL,CAAeQ,CAAf,CAAhC;AACAA,IAAAA,CAAC,IAAI,CAAL;AACD;;AACD,MAAIL,4BAAJ,EAAkC;AAChCT,IAAAA,MAAM,CAACiB,qBAAP,GAA+BtB,IAAI,CAACW,SAAL,CAAeQ,CAAf,CAA/B;AACAA,IAAAA,CAAC,IAAI,CAAL;AACD;;AACD,MAAIJ,wBAAJ,EAA8B;AAC5BV,IAAAA,MAAM,CAACkB,iBAAP,GAA2BvB,IAAI,CAACW,SAAL,CAAeQ,CAAf,CAA3B;AACAA,IAAAA,CAAC,IAAI,CAAL;AACD;;AACD,MAAIH,yBAAJ,EAA+B;AAC7BX,IAAAA,MAAM,CAACmB,kBAAP,GAA4BxB,IAAI,CAACW,SAAL,CAAeQ,CAAf,CAA5B;AACD;;AACD,MAAIF,eAAJ,EAAqB;AACnBZ,IAAAA,MAAM,CAACY,eAAP,GAAyB,IAAzB;AACD;;AACD,MAAI,CAACL,qBAAD,IAA0BM,iBAA9B,EAAiD;AAC/Cb,IAAAA,MAAM,CAACoB,oBAAP,GAA8B,IAA9B;AACD;;AACD,SAAOpB,MAAP;AACD,CA9CD;;AAgDAqB,MAAM,CAACC,OAAP,GAAiB7B,IAAjB","sourcesContent":["var tfhd = function(data) {\n  var\n  view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n    result = {\n      version: data[0],\n      flags: new Uint8Array(data.subarray(1, 4)),\n      trackId: view.getUint32(4)\n    },\n    baseDataOffsetPresent = result.flags[2] & 0x01,\n    sampleDescriptionIndexPresent = result.flags[2] & 0x02,\n    defaultSampleDurationPresent = result.flags[2] & 0x08,\n    defaultSampleSizePresent = result.flags[2] & 0x10,\n    defaultSampleFlagsPresent = result.flags[2] & 0x20,\n    durationIsEmpty = result.flags[0] & 0x010000,\n    defaultBaseIsMoof =  result.flags[0] & 0x020000,\n    i;\n\n  i = 8;\n  if (baseDataOffsetPresent) {\n    i += 4; // truncate top 4 bytes\n    // FIXME: should we read the full 64 bits?\n    result.baseDataOffset = view.getUint32(12);\n    i += 4;\n  }\n  if (sampleDescriptionIndexPresent) {\n    result.sampleDescriptionIndex = view.getUint32(i);\n    i += 4;\n  }\n  if (defaultSampleDurationPresent) {\n    result.defaultSampleDuration = view.getUint32(i);\n    i += 4;\n  }\n  if (defaultSampleSizePresent) {\n    result.defaultSampleSize = view.getUint32(i);\n    i += 4;\n  }\n  if (defaultSampleFlagsPresent) {\n    result.defaultSampleFlags = view.getUint32(i);\n  }\n  if (durationIsEmpty) {\n    result.durationIsEmpty = true;\n  }\n  if (!baseDataOffsetPresent && defaultBaseIsMoof) {\n    result.baseDataOffsetIsMoof = true;\n  }\n  return result;\n};\n\nmodule.exports = tfhd;\n"]},"metadata":{},"sourceType":"script"}