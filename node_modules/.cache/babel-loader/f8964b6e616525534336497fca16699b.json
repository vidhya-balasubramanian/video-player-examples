{"ast":null,"code":"/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n *\n * Utilities to detect basic properties and metadata about MP4s.\n */\n'use strict';\n\nvar toUnsigned = require('../utils/bin').toUnsigned;\n\nvar toHexString = require('../utils/bin').toHexString;\n\nvar findBox = require('../mp4/find-box.js');\n\nvar parseType = require('../mp4/parse-type.js');\n\nvar parseTfhd = require('../tools/parse-tfhd.js');\n\nvar parseTrun = require('../tools/parse-trun.js');\n\nvar parseTfdt = require('../tools/parse-tfdt.js');\n\nvar timescale, startTime, compositionStartTime, getVideoTrackIds, getTracks, getTimescaleFromMediaHeader;\n/**\n * Parses an MP4 initialization segment and extracts the timescale\n * values for any declared tracks. Timescale values indicate the\n * number of clock ticks per second to assume for time-based values\n * elsewhere in the MP4.\n *\n * To determine the start time of an MP4, you need two pieces of\n * information: the timescale unit and the earliest base media decode\n * time. Multiple timescales can be specified within an MP4 but the\n * base media decode time is always expressed in the timescale from\n * the media header box for the track:\n * ```\n * moov > trak > mdia > mdhd.timescale\n * ```\n * @param init {Uint8Array} the bytes of the init segment\n * @return {object} a hash of track ids to timescale values or null if\n * the init segment is malformed.\n */\n\ntimescale = function (init) {\n  var result = {},\n      traks = findBox(init, ['moov', 'trak']); // mdhd timescale\n\n  return traks.reduce(function (result, trak) {\n    var tkhd, version, index, id, mdhd;\n    tkhd = findBox(trak, ['tkhd'])[0];\n\n    if (!tkhd) {\n      return null;\n    }\n\n    version = tkhd[0];\n    index = version === 0 ? 12 : 20;\n    id = toUnsigned(tkhd[index] << 24 | tkhd[index + 1] << 16 | tkhd[index + 2] << 8 | tkhd[index + 3]);\n    mdhd = findBox(trak, ['mdia', 'mdhd'])[0];\n\n    if (!mdhd) {\n      return null;\n    }\n\n    version = mdhd[0];\n    index = version === 0 ? 12 : 20;\n    result[id] = toUnsigned(mdhd[index] << 24 | mdhd[index + 1] << 16 | mdhd[index + 2] << 8 | mdhd[index + 3]);\n    return result;\n  }, result);\n};\n/**\n * Determine the base media decode start time, in seconds, for an MP4\n * fragment. If multiple fragments are specified, the earliest time is\n * returned.\n *\n * The base media decode time can be parsed from track fragment\n * metadata:\n * ```\n * moof > traf > tfdt.baseMediaDecodeTime\n * ```\n * It requires the timescale value from the mdhd to interpret.\n *\n * @param timescale {object} a hash of track ids to timescale values.\n * @return {number} the earliest base media decode start time for the\n * fragment, in seconds\n */\n\n\nstartTime = function (timescale, fragment) {\n  var trafs, baseTimes, result; // we need info from two childrend of each track fragment box\n\n  trafs = findBox(fragment, ['moof', 'traf']); // determine the start times for each track\n\n  baseTimes = [].concat.apply([], trafs.map(function (traf) {\n    return findBox(traf, ['tfhd']).map(function (tfhd) {\n      var id, scale, baseTime; // get the track id from the tfhd\n\n      id = toUnsigned(tfhd[4] << 24 | tfhd[5] << 16 | tfhd[6] << 8 | tfhd[7]); // assume a 90kHz clock if no timescale was specified\n\n      scale = timescale[id] || 90e3; // get the base media decode time from the tfdt\n\n      baseTime = findBox(traf, ['tfdt']).map(function (tfdt) {\n        var version, result;\n        version = tfdt[0];\n        result = toUnsigned(tfdt[4] << 24 | tfdt[5] << 16 | tfdt[6] << 8 | tfdt[7]);\n\n        if (version === 1) {\n          result *= Math.pow(2, 32);\n          result += toUnsigned(tfdt[8] << 24 | tfdt[9] << 16 | tfdt[10] << 8 | tfdt[11]);\n        }\n\n        return result;\n      })[0];\n      baseTime = typeof baseTime === 'number' && !isNaN(baseTime) ? baseTime : Infinity; // convert base time to seconds\n\n      return baseTime / scale;\n    });\n  })); // return the minimum\n\n  result = Math.min.apply(null, baseTimes);\n  return isFinite(result) ? result : 0;\n};\n/**\n * Determine the composition start, in seconds, for an MP4\n * fragment.\n *\n * The composition start time of a fragment can be calculated using the base\n * media decode time, composition time offset, and timescale, as follows:\n *\n * compositionStartTime = (baseMediaDecodeTime + compositionTimeOffset) / timescale\n *\n * All of the aforementioned information is contained within a media fragment's\n * `traf` box, except for timescale info, which comes from the initialization\n * segment, so a track id (also contained within a `traf`) is also necessary to\n * associate it with a timescale\n *\n *\n * @param timescales {object} - a hash of track ids to timescale values.\n * @param fragment {Unit8Array} - the bytes of a media segment\n * @return {number} the composition start time for the fragment, in seconds\n **/\n\n\ncompositionStartTime = function (timescales, fragment) {\n  var trafBoxes = findBox(fragment, ['moof', 'traf']);\n  var baseMediaDecodeTime = 0;\n  var compositionTimeOffset = 0;\n  var trackId;\n\n  if (trafBoxes && trafBoxes.length) {\n    // The spec states that track run samples contained within a `traf` box are contiguous, but\n    // it does not explicitly state whether the `traf` boxes themselves are contiguous.\n    // We will assume that they are, so we only need the first to calculate start time.\n    var tfhd = findBox(trafBoxes[0], ['tfhd'])[0];\n    var trun = findBox(trafBoxes[0], ['trun'])[0];\n    var tfdt = findBox(trafBoxes[0], ['tfdt'])[0];\n\n    if (tfhd) {\n      var parsedTfhd = parseTfhd(tfhd);\n      trackId = parsedTfhd.trackId;\n    }\n\n    if (tfdt) {\n      var parsedTfdt = parseTfdt(tfdt);\n      baseMediaDecodeTime = parsedTfdt.baseMediaDecodeTime;\n    }\n\n    if (trun) {\n      var parsedTrun = parseTrun(trun);\n\n      if (parsedTrun.samples && parsedTrun.samples.length) {\n        compositionTimeOffset = parsedTrun.samples[0].compositionTimeOffset || 0;\n      }\n    }\n  } // Get timescale for this specific track. Assume a 90kHz clock if no timescale was\n  // specified.\n\n\n  var timescale = timescales[trackId] || 90e3; // return the composition start time, in seconds\n\n  return (baseMediaDecodeTime + compositionTimeOffset) / timescale;\n};\n/**\n  * Find the trackIds of the video tracks in this source.\n  * Found by parsing the Handler Reference and Track Header Boxes:\n  *   moov > trak > mdia > hdlr\n  *   moov > trak > tkhd\n  *\n  * @param {Uint8Array} init - The bytes of the init segment for this source\n  * @return {Number[]} A list of trackIds\n  *\n  * @see ISO-BMFF-12/2015, Section 8.4.3\n **/\n\n\ngetVideoTrackIds = function (init) {\n  var traks = findBox(init, ['moov', 'trak']);\n  var videoTrackIds = [];\n  traks.forEach(function (trak) {\n    var hdlrs = findBox(trak, ['mdia', 'hdlr']);\n    var tkhds = findBox(trak, ['tkhd']);\n    hdlrs.forEach(function (hdlr, index) {\n      var handlerType = parseType(hdlr.subarray(8, 12));\n      var tkhd = tkhds[index];\n      var view;\n      var version;\n      var trackId;\n\n      if (handlerType === 'vide') {\n        view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);\n        version = view.getUint8(0);\n        trackId = version === 0 ? view.getUint32(12) : view.getUint32(20);\n        videoTrackIds.push(trackId);\n      }\n    });\n  });\n  return videoTrackIds;\n};\n\ngetTimescaleFromMediaHeader = function (mdhd) {\n  // mdhd is a FullBox, meaning it will have its own version as the first byte\n  var version = mdhd[0];\n  var index = version === 0 ? 12 : 20;\n  return toUnsigned(mdhd[index] << 24 | mdhd[index + 1] << 16 | mdhd[index + 2] << 8 | mdhd[index + 3]);\n};\n/**\n * Get all the video, audio, and hint tracks from a non fragmented\n * mp4 segment\n */\n\n\ngetTracks = function (init) {\n  var traks = findBox(init, ['moov', 'trak']);\n  var tracks = [];\n  traks.forEach(function (trak) {\n    var track = {};\n    var tkhd = findBox(trak, ['tkhd'])[0];\n    var view, tkhdVersion; // id\n\n    if (tkhd) {\n      view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);\n      tkhdVersion = view.getUint8(0);\n      track.id = tkhdVersion === 0 ? view.getUint32(12) : view.getUint32(20);\n    }\n\n    var hdlr = findBox(trak, ['mdia', 'hdlr'])[0]; // type\n\n    if (hdlr) {\n      var type = parseType(hdlr.subarray(8, 12));\n\n      if (type === 'vide') {\n        track.type = 'video';\n      } else if (type === 'soun') {\n        track.type = 'audio';\n      } else {\n        track.type = type;\n      }\n    } // codec\n\n\n    var stsd = findBox(trak, ['mdia', 'minf', 'stbl', 'stsd'])[0];\n\n    if (stsd) {\n      var sampleDescriptions = stsd.subarray(8); // gives the codec type string\n\n      track.codec = parseType(sampleDescriptions.subarray(4, 8));\n      var codecBox = findBox(sampleDescriptions, [track.codec])[0];\n      var codecConfig, codecConfigType;\n\n      if (codecBox) {\n        // https://tools.ietf.org/html/rfc6381#section-3.3\n        if (/^[a-z]vc[1-9]$/i.test(track.codec)) {\n          // we don't need anything but the \"config\" parameter of the\n          // avc1 codecBox\n          codecConfig = codecBox.subarray(78);\n          codecConfigType = parseType(codecConfig.subarray(4, 8));\n\n          if (codecConfigType === 'avcC' && codecConfig.length > 11) {\n            track.codec += '.'; // left padded with zeroes for single digit hex\n            // profile idc\n\n            track.codec += toHexString(codecConfig[9]); // the byte containing the constraint_set flags\n\n            track.codec += toHexString(codecConfig[10]); // level idc\n\n            track.codec += toHexString(codecConfig[11]);\n          } else {\n            // TODO: show a warning that we couldn't parse the codec\n            // and are using the default\n            track.codec = 'avc1.4d400d';\n          }\n        } else if (/^mp4[a,v]$/i.test(track.codec)) {\n          // we do not need anything but the streamDescriptor of the mp4a codecBox\n          codecConfig = codecBox.subarray(28);\n          codecConfigType = parseType(codecConfig.subarray(4, 8));\n\n          if (codecConfigType === 'esds' && codecConfig.length > 20 && codecConfig[19] !== 0) {\n            track.codec += '.' + toHexString(codecConfig[19]); // this value is only a single digit\n\n            track.codec += '.' + toHexString(codecConfig[20] >>> 2 & 0x3f).replace(/^0/, '');\n          } else {\n            // TODO: show a warning that we couldn't parse the codec\n            // and are using the default\n            track.codec = 'mp4a.40.2';\n          }\n        } else {\n          // flac, opus, etc\n          track.codec = track.codec.toLowerCase();\n        }\n      }\n    }\n\n    var mdhd = findBox(trak, ['mdia', 'mdhd'])[0];\n\n    if (mdhd) {\n      track.timescale = getTimescaleFromMediaHeader(mdhd);\n    }\n\n    tracks.push(track);\n  });\n  return tracks;\n};\n\nmodule.exports = {\n  // export mp4 inspector's findBox and parseType for backwards compatibility\n  findBox: findBox,\n  parseType: parseType,\n  timescale: timescale,\n  startTime: startTime,\n  compositionStartTime: compositionStartTime,\n  videoTrackIds: getVideoTrackIds,\n  tracks: getTracks,\n  getTimescaleFromMediaHeader: getTimescaleFromMediaHeader\n};","map":{"version":3,"sources":["/home/ubuntu/Documents/video-player-examples/node_modules/mux.js/lib/mp4/probe.js"],"names":["toUnsigned","require","toHexString","findBox","parseType","parseTfhd","parseTrun","parseTfdt","timescale","startTime","compositionStartTime","getVideoTrackIds","getTracks","getTimescaleFromMediaHeader","init","result","traks","reduce","trak","tkhd","version","index","id","mdhd","fragment","trafs","baseTimes","concat","apply","map","traf","tfhd","scale","baseTime","tfdt","Math","pow","isNaN","Infinity","min","isFinite","timescales","trafBoxes","baseMediaDecodeTime","compositionTimeOffset","trackId","length","trun","parsedTfhd","parsedTfdt","parsedTrun","samples","videoTrackIds","forEach","hdlrs","tkhds","hdlr","handlerType","subarray","view","DataView","buffer","byteOffset","byteLength","getUint8","getUint32","push","tracks","track","tkhdVersion","type","stsd","sampleDescriptions","codec","codecBox","codecConfig","codecConfigType","test","replace","toLowerCase","module","exports"],"mappings":"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","sourcesContent":["/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n *\n * Utilities to detect basic properties and metadata about MP4s.\n */\n'use strict';\n\nvar toUnsigned = require('../utils/bin').toUnsigned;\nvar toHexString = require('../utils/bin').toHexString;\nvar findBox = require('../mp4/find-box.js');\nvar parseType = require('../mp4/parse-type.js');\nvar parseTfhd = require('../tools/parse-tfhd.js');\nvar parseTrun = require('../tools/parse-trun.js');\nvar parseTfdt = require('../tools/parse-tfdt.js');\nvar timescale, startTime, compositionStartTime, getVideoTrackIds, getTracks,\n  getTimescaleFromMediaHeader;\n\n/**\n * Parses an MP4 initialization segment and extracts the timescale\n * values for any declared tracks. Timescale values indicate the\n * number of clock ticks per second to assume for time-based values\n * elsewhere in the MP4.\n *\n * To determine the start time of an MP4, you need two pieces of\n * information: the timescale unit and the earliest base media decode\n * time. Multiple timescales can be specified within an MP4 but the\n * base media decode time is always expressed in the timescale from\n * the media header box for the track:\n * ```\n * moov > trak > mdia > mdhd.timescale\n * ```\n * @param init {Uint8Array} the bytes of the init segment\n * @return {object} a hash of track ids to timescale values or null if\n * the init segment is malformed.\n */\ntimescale = function(init) {\n  var\n    result = {},\n    traks = findBox(init, ['moov', 'trak']);\n\n  // mdhd timescale\n  return traks.reduce(function(result, trak) {\n    var tkhd, version, index, id, mdhd;\n\n    tkhd = findBox(trak, ['tkhd'])[0];\n    if (!tkhd) {\n      return null;\n    }\n    version = tkhd[0];\n    index = version === 0 ? 12 : 20;\n    id = toUnsigned(tkhd[index]     << 24 |\n                    tkhd[index + 1] << 16 |\n                    tkhd[index + 2] <<  8 |\n                    tkhd[index + 3]);\n\n    mdhd = findBox(trak, ['mdia', 'mdhd'])[0];\n    if (!mdhd) {\n      return null;\n    }\n    version = mdhd[0];\n    index = version === 0 ? 12 : 20;\n    result[id] = toUnsigned(mdhd[index]     << 24 |\n                            mdhd[index + 1] << 16 |\n                            mdhd[index + 2] <<  8 |\n                            mdhd[index + 3]);\n    return result;\n  }, result);\n};\n\n/**\n * Determine the base media decode start time, in seconds, for an MP4\n * fragment. If multiple fragments are specified, the earliest time is\n * returned.\n *\n * The base media decode time can be parsed from track fragment\n * metadata:\n * ```\n * moof > traf > tfdt.baseMediaDecodeTime\n * ```\n * It requires the timescale value from the mdhd to interpret.\n *\n * @param timescale {object} a hash of track ids to timescale values.\n * @return {number} the earliest base media decode start time for the\n * fragment, in seconds\n */\nstartTime = function(timescale, fragment) {\n  var trafs, baseTimes, result;\n\n  // we need info from two childrend of each track fragment box\n  trafs = findBox(fragment, ['moof', 'traf']);\n\n  // determine the start times for each track\n  baseTimes = [].concat.apply([], trafs.map(function(traf) {\n    return findBox(traf, ['tfhd']).map(function(tfhd) {\n      var id, scale, baseTime;\n\n      // get the track id from the tfhd\n      id = toUnsigned(tfhd[4] << 24 |\n                      tfhd[5] << 16 |\n                      tfhd[6] <<  8 |\n                      tfhd[7]);\n      // assume a 90kHz clock if no timescale was specified\n      scale = timescale[id] || 90e3;\n\n      // get the base media decode time from the tfdt\n      baseTime = findBox(traf, ['tfdt']).map(function(tfdt) {\n        var version, result;\n\n        version = tfdt[0];\n        result = toUnsigned(tfdt[4] << 24 |\n                            tfdt[5] << 16 |\n                            tfdt[6] <<  8 |\n                            tfdt[7]);\n        if (version ===  1) {\n          result *= Math.pow(2, 32);\n          result += toUnsigned(tfdt[8]  << 24 |\n                               tfdt[9]  << 16 |\n                               tfdt[10] <<  8 |\n                               tfdt[11]);\n        }\n        return result;\n      })[0];\n      baseTime = typeof baseTime === 'number' && !isNaN(baseTime) ? baseTime : Infinity;\n\n      // convert base time to seconds\n      return baseTime / scale;\n    });\n  }));\n\n  // return the minimum\n  result = Math.min.apply(null, baseTimes);\n  return isFinite(result) ? result : 0;\n};\n\n/**\n * Determine the composition start, in seconds, for an MP4\n * fragment.\n *\n * The composition start time of a fragment can be calculated using the base\n * media decode time, composition time offset, and timescale, as follows:\n *\n * compositionStartTime = (baseMediaDecodeTime + compositionTimeOffset) / timescale\n *\n * All of the aforementioned information is contained within a media fragment's\n * `traf` box, except for timescale info, which comes from the initialization\n * segment, so a track id (also contained within a `traf`) is also necessary to\n * associate it with a timescale\n *\n *\n * @param timescales {object} - a hash of track ids to timescale values.\n * @param fragment {Unit8Array} - the bytes of a media segment\n * @return {number} the composition start time for the fragment, in seconds\n **/\ncompositionStartTime = function(timescales, fragment) {\n  var trafBoxes = findBox(fragment, ['moof', 'traf']);\n  var baseMediaDecodeTime = 0;\n  var compositionTimeOffset = 0;\n  var trackId;\n\n  if (trafBoxes && trafBoxes.length) {\n    // The spec states that track run samples contained within a `traf` box are contiguous, but\n    // it does not explicitly state whether the `traf` boxes themselves are contiguous.\n    // We will assume that they are, so we only need the first to calculate start time.\n    var tfhd = findBox(trafBoxes[0], ['tfhd'])[0];\n    var trun = findBox(trafBoxes[0], ['trun'])[0];\n    var tfdt = findBox(trafBoxes[0], ['tfdt'])[0];\n\n    if (tfhd) {\n      var parsedTfhd = parseTfhd(tfhd);\n\n      trackId = parsedTfhd.trackId;\n    }\n\n    if (tfdt) {\n      var parsedTfdt = parseTfdt(tfdt);\n\n      baseMediaDecodeTime = parsedTfdt.baseMediaDecodeTime;\n    }\n\n    if (trun) {\n      var parsedTrun = parseTrun(trun);\n\n      if (parsedTrun.samples && parsedTrun.samples.length) {\n        compositionTimeOffset = parsedTrun.samples[0].compositionTimeOffset || 0;\n      }\n    }\n  }\n\n  // Get timescale for this specific track. Assume a 90kHz clock if no timescale was\n  // specified.\n  var timescale = timescales[trackId] || 90e3;\n\n  // return the composition start time, in seconds\n  return (baseMediaDecodeTime + compositionTimeOffset) / timescale;\n};\n\n/**\n  * Find the trackIds of the video tracks in this source.\n  * Found by parsing the Handler Reference and Track Header Boxes:\n  *   moov > trak > mdia > hdlr\n  *   moov > trak > tkhd\n  *\n  * @param {Uint8Array} init - The bytes of the init segment for this source\n  * @return {Number[]} A list of trackIds\n  *\n  * @see ISO-BMFF-12/2015, Section 8.4.3\n **/\ngetVideoTrackIds = function(init) {\n  var traks = findBox(init, ['moov', 'trak']);\n  var videoTrackIds = [];\n\n  traks.forEach(function(trak) {\n    var hdlrs = findBox(trak, ['mdia', 'hdlr']);\n    var tkhds = findBox(trak, ['tkhd']);\n\n    hdlrs.forEach(function(hdlr, index) {\n      var handlerType = parseType(hdlr.subarray(8, 12));\n      var tkhd = tkhds[index];\n      var view;\n      var version;\n      var trackId;\n\n      if (handlerType === 'vide') {\n        view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);\n        version = view.getUint8(0);\n        trackId = (version === 0) ? view.getUint32(12) : view.getUint32(20);\n\n        videoTrackIds.push(trackId);\n      }\n    });\n  });\n\n  return videoTrackIds;\n};\n\ngetTimescaleFromMediaHeader = function(mdhd) {\n  // mdhd is a FullBox, meaning it will have its own version as the first byte\n  var version = mdhd[0];\n  var index = version === 0 ? 12 : 20;\n\n  return toUnsigned(\n    mdhd[index]     << 24 |\n    mdhd[index + 1] << 16 |\n    mdhd[index + 2] <<  8 |\n    mdhd[index + 3]\n  );\n};\n\n/**\n * Get all the video, audio, and hint tracks from a non fragmented\n * mp4 segment\n */\ngetTracks = function(init) {\n  var traks = findBox(init, ['moov', 'trak']);\n  var tracks = [];\n\n  traks.forEach(function(trak) {\n    var track = {};\n    var tkhd = findBox(trak, ['tkhd'])[0];\n    var view, tkhdVersion;\n\n    // id\n    if (tkhd) {\n      view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);\n      tkhdVersion = view.getUint8(0);\n\n      track.id = (tkhdVersion === 0) ? view.getUint32(12) : view.getUint32(20);\n    }\n\n    var hdlr = findBox(trak, ['mdia', 'hdlr'])[0];\n\n    // type\n    if (hdlr) {\n      var type = parseType(hdlr.subarray(8, 12));\n\n      if (type === 'vide') {\n        track.type = 'video';\n      } else if (type === 'soun') {\n        track.type = 'audio';\n      } else {\n        track.type = type;\n      }\n    }\n\n\n    // codec\n    var stsd = findBox(trak, ['mdia', 'minf', 'stbl', 'stsd'])[0];\n\n    if (stsd) {\n      var sampleDescriptions = stsd.subarray(8);\n      // gives the codec type string\n      track.codec = parseType(sampleDescriptions.subarray(4, 8));\n\n      var codecBox = findBox(sampleDescriptions, [track.codec])[0];\n      var codecConfig, codecConfigType;\n\n      if (codecBox) {\n        // https://tools.ietf.org/html/rfc6381#section-3.3\n        if ((/^[a-z]vc[1-9]$/i).test(track.codec)) {\n          // we don't need anything but the \"config\" parameter of the\n          // avc1 codecBox\n          codecConfig = codecBox.subarray(78);\n          codecConfigType = parseType(codecConfig.subarray(4, 8));\n\n          if (codecConfigType === 'avcC' && codecConfig.length > 11) {\n            track.codec += '.';\n\n            // left padded with zeroes for single digit hex\n            // profile idc\n            track.codec +=  toHexString(codecConfig[9]);\n            // the byte containing the constraint_set flags\n            track.codec += toHexString(codecConfig[10]);\n            // level idc\n            track.codec += toHexString(codecConfig[11]);\n          } else {\n            // TODO: show a warning that we couldn't parse the codec\n            // and are using the default\n            track.codec = 'avc1.4d400d';\n          }\n        } else if ((/^mp4[a,v]$/i).test(track.codec)) {\n          // we do not need anything but the streamDescriptor of the mp4a codecBox\n          codecConfig = codecBox.subarray(28);\n          codecConfigType = parseType(codecConfig.subarray(4, 8));\n\n          if (codecConfigType === 'esds' && codecConfig.length > 20 && codecConfig[19] !== 0) {\n            track.codec += '.' + toHexString(codecConfig[19]);\n            // this value is only a single digit\n            track.codec += '.' + toHexString((codecConfig[20] >>> 2) & 0x3f).replace(/^0/, '');\n          } else {\n            // TODO: show a warning that we couldn't parse the codec\n            // and are using the default\n            track.codec = 'mp4a.40.2';\n          }\n        } else {\n          // flac, opus, etc\n          track.codec = track.codec.toLowerCase();\n        }\n      }\n    }\n\n    var mdhd = findBox(trak, ['mdia', 'mdhd'])[0];\n\n    if (mdhd) {\n      track.timescale = getTimescaleFromMediaHeader(mdhd);\n    }\n\n    tracks.push(track);\n  });\n\n  return tracks;\n};\n\nmodule.exports = {\n  // export mp4 inspector's findBox and parseType for backwards compatibility\n  findBox: findBox,\n  parseType: parseType,\n  timescale: timescale,\n  startTime: startTime,\n  compositionStartTime: compositionStartTime,\n  videoTrackIds: getVideoTrackIds,\n  tracks: getTracks,\n  getTimescaleFromMediaHeader: getTimescaleFromMediaHeader\n};\n"]},"metadata":{},"sourceType":"script"}